/* ABI Definitions */
#define function name() view returns(string)
#define function symbol() view returns(string)
#define function decimals() view returns(uint8)

#define function totalSupply() view returns(uint256)
#define function balanceOf(address) view returns(uint256)
#define function allowance(address,address) view returns(uint256)

#define function approve(address,uint256) nonpayable returns(bool)
#define function transfer(address,uint256) nonpayable returns(bool)
#define function transferFrom(address,address,uint256) nonpayable returns(bool)

#define event Approval(address,address,uint256)
#define event Transfer(address,address,uint256)

#define function deposit() payable returns()
#define function withdraw(uint256) nonpayable returns()

#define event Deposit(address,uint256)
#define event Withdrawl(address,uint256)

/* Macro Definitions */
#define macro NAME() = takes(0) returns(0) {
    // store string offset in memory
    0x20                                        // [0x20]
    0x00                                        // [0x00, 0x20]
    mstore                                      // []

    // store the string length concatenated with the string in memory
    __RIGHTPAD(0x0d57726170706564204574686572)  // [13 . "Wrapped Ether"]
    0x3f                                        // [0x20, 13 . "Wrapped Ether"]
    mstore                                      // []

    // return the string
    0x60                                        // [0x60]
    0x00                                        // [0x00, 0x60]
    return                                      // []
}

#define macro SYMBOL() = takes(0) returns(0) {
    // store string offset in memory
    0x20                        // [0x20]
    0x00                        // [0x00, 0x20]
    mstore                      // []

    // store the string length concatenated with the string in memory
    __RIGHTPAD(0x0457455448)    // [4 . "WETH"]
    0x3f                        // [0x20, 4 . "WETH"]
    mstore

    // return the string
    0x60                        // [0x60]
    0x00                        // [0x00, 0x60]
    return                      // []
}

#define macro DECIMALS() = takes(0) returns(0) {
    // store the decimals in memory
    0x12    // [0x12]
    0x00    // [0x00, 0x12]
    mstore  // []

    // return the decimals
    0x20    // [0x20]
    0x00    // [0x00, 0x20]
    return  // []
}

#define macro TOTAL_SUPPLY() = takes(0) returns(0) {
    // store current ether balance in memory
    selfbalance // [selfbalance]
    0x00        // [0x00, selfbalance]
    mstore      // []

    // return the current ether balance
    0x20        // [0x20]
    0x00        // [0x00, 0x20]
    return      // []
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr                      // [selector]

    dup1 __FUNC_SIG(name) eq name jumpi             // [selector]
    dup1 __FUNC_SIG(symbol) eq symbol jumpi         // [selector]
    dup1 __FUNC_SIG(decimals) eq decimals jumpi     // [selector]

    __FUNC_SIG(totalSupply) eq totalSupply jumpi    // []

    0x00 dup1 revert                                // []

    name:
        NAME()
    symbol:
        SYMBOL()
    decimals:
        DECIMALS()
    totalSupply:
        TOTAL_SUPPLY()
}
